set (DEPENDENCIES_INCLUDE_DIRS "")
set (DEPENDENCIES_COMPILE_OPTIONS "")
set (DEPENDENCIES_LIBRARIES "")
set (DEPENDENCIES_LIBRARY_DIRS "")
set (DEPENDENCIES_LINK_OPTIONS "")
set (DEPENDENCIES_LEGACY_LDFLAGS "")
set (DEPENDENCIES_DEFINES "")

include (FindPkgConfig OPTIONAL)

# Whether we're on a system where it is likely that we'll want to build against system-installed dependencies
if (NOT WIN32 AND NOT APPLE)
  set(SYSTEM_WITH_LIBS ON)
else()
  set(SYSTEM_WITH_LIBS OFF)
endif()

option (SYSTEM_RTMIDI "Use a system-installed version of RtMidi instead of the vendored one" ${SYSTEM_WITH_LIBS})
option (SYSTEM_VORBISFILE "Use a system-installed version of vorbisfile (part of Vorbis) instead of the vendored one" ${SYSTEM_WITH_LIBS})

if (SYSTEM_RTMIDI)
  if (PKG_CONFIG_FOUND)
    pkg_check_modules (RTMIDI rtmidi)
    if (RTMIDI_FOUND)
      list(APPEND DEPENDENCIES_INCLUDE_DIRS ${RTMIDI_INCLUDE_DIRS})
      list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${RTMIDI_CFLAGS_OTHER})
      list(APPEND DEPENDENCIES_LIBRARIES ${RTMIDI_LIBRARIES})
      list(APPEND DEPENDENCIES_LIBRARY_DIRS ${RTMIDI_LIBRARY_DIRS})
      list(APPEND DEPENDENCIES_LINK_OPTIONS ${RTMIDI_LDFLAGS_OTHER})
      list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${RTMIDI_LDFLAGS})
    endif()
  endif()

  if (NOT RTMIDI_FOUND)
    message (STATUS "Looking for RtMidi library & headers")
    find_library (RTMIDI_MANUAL_LIBRARY NAMES rtmidi)
    find_path (RTMIDI_MANUAL_INCLUDE_DIRS NAMES "RtMidi.h" PATH_SUFFIXES "include/rtmidi")

    if (RTMIDI_MANUAL_LIBRARY AND RTMIDI_MANUAL_INCLUDE_DIRS)
      set (RTMIDI_FOUND YES)
      list (APPEND DEPENDENCIES_INCLUDE_DIRS ${RTMIDI_MANUAL_INCLUDE_DIRS})
      list (APPEND DEPENDENCIES_LIBRARIES ${RTMIDI_MANUAL_LIBRARY})
      list (APPEND DEPENDENCIES_LEGACY_LDFLAGS ${RTMIDI_MANUAL_LIBRARY})
    else()
      message (FATAL_ERROR "System-installed RtMidi requested but not found")
    endif()
  endif (NOT RTMIDI_FOUND)

else()

  set (BUILD_SHARED_LIBS OFF CACHE BOOL "We don't want to build our vendored RtMidi as a shared library" FORCE)
  set (RTMIDI_BUILD_TESTING OFF CACHE BOOL "We don't want to build our vendored RtMidi's test programs" FORCE)
  add_subdirectory (rtmidi EXCLUDE_FROM_ALL)

  set (RTMIDI_FOUND YES)
  list(APPEND DEPENDENCIES_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/rtmidi")
  list(APPEND DEPENDENCIES_LIBRARIES rtmidi)
  list(APPEND DEPENDENCIES_LEGACY_LDFLAGS rtmidi)
endif (SYSTEM_RTMIDI)

if (RTMIDI_FOUND)
  list (APPEND DEPENDENCIES_DEFINES "RTMIDI_SUPPORTED")
else()
  message (FATAL_ERROR "Missing RtMidi (required for MIDI support)!")
endif()

if (SYSTEM_VORBISFILE)
  if (PKG_CONFIG_FOUND)
    pkg_check_modules (VORBISFILE vorbisfile)
    if (VORBISFILE_FOUND)
      list(APPEND DEPENDENCIES_INCLUDE_DIRS ${VORBISFILE_INCLUDE_DIRS})
      list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${VORBISFILE_CFLAGS_OTHER})
      list(APPEND DEPENDENCIES_LIBRARIES ${VORBISFILE_LIBRARIES})
      list(APPEND DEPENDENCIES_LIBRARY_DIRS ${VORBISFILE_LIBRARY_DIRS})
      list(APPEND DEPENDENCIES_LINK_OPTIONS ${VORBISFILE_LDFLAGS_OTHER})
      list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${VORBISFILE_LDFLAGS})
    endif()
  endif()

  if (NOT VORBISFILE_FOUND)
    message (STATUS "Looking for vorbisfile library & headers")
    find_library (VORBISFILE_MANUAL_LIBRARY NAMES vorbisfile vorbisfile_static)
    find_path (VORBISFILE_MANUAL_INCLUDE_DIRS NAMES "vorbisfile.h" PATH_SUFFIXES "include/vorbis")

    if (VORBISFILE_MANUAL_LIBRARY AND VORBISFILE_MANUAL_INCLUDE_DIRS)
      set (VORBISFILE_FOUND YES)
      list (APPEND DEPENDENCIES_INCLUDE_DIRS ${VORBISFILE_MANUAL_INCLUDE_DIRS})
      list (APPEND DEPENDENCIES_LIBRARIES ${VORBISFILE_MANUAL_LIBRARY})
      list (APPEND DEPENDENCIES_LEGACY_LDFLAGS ${VORBISFILE_MANUAL_LIBRARY})
    else()
      message (FATAL_ERROR "System-installed vorbisfile requested but not found")
    endif()
  endif (NOT VORBISFILE_FOUND)

else()

  set (BUILD_SHARED_LIBS OFF CACHE BOOL "We don't want to build our vendored vorbisfile as a shared library" FORCE)
  set (BUILD_TESTING OFF CACHE BOOL "We don't want to build our vendored vorbisfile's test programs" FORCE)
  add_subdirectory (ogg EXCLUDE_FROM_ALL)
  set (OGG_LIBRARY ogg)
  set (OGG_INCLUDE_DIR "${CMAKE_CURRENT_SOURCE_DIR}/ogg/include")
  add_subdirectory (vorbis EXCLUDE_FROM_ALL)

  set (VORBISFILE_FOUND YES)
  list (APPEND DEPENDENCIES_INCLUDE_DIRS "${CMAKE_CURRENT_SOURCE_DIR}/vorbis/include")
  list (APPEND DEPENDENCIES_LIBRARIES vorbisfile)
  list (APPEND DEPENDENCIES_LEGACY_LDFLAGS vorbisfile)
endif (SYSTEM_VORBISFILE)

if (VORBISFILE_FOUND)
  list (APPEND DEPENDENCIES_DEFINES "pxINCLUDE_OGGVORBIS")
else()
  message ("Missing vorbisfile (required for using vorbis-encoded samples)!")
endif()

# Export to global scope
set (DEPENDENCIES_INCLUDE_DIRS ${DEPENDENCIES_INCLUDE_DIRS} PARENT_SCOPE)
set (DEPENDENCIES_DEFINES ${DEPENDENCIES_DEFINES} PARENT_SCOPE)
set (DEPENDENCIES_COMPILE_OPTIONS ${DEPENDENCIES_COMPILE_OPTIONS} PARENT_SCOPE)
set (DEPENDENCIES_LIBRARIES ${DEPENDENCIES_LIBRARIES} PARENT_SCOPE)
set (DEPENDENCIES_LIBRARY_DIRS ${DEPENDENCIES_LIBRARY_DIRS} PARENT_SCOPE)
set (DEPENDENCIES_LINK_OPTIONS ${DEPENDENCIES_LINK_OPTIONS} PARENT_SCOPE)
set (DEPENDENCIES_LEGACY_LDFLAGS ${DEPENDENCIES_LEGACY_LDFLAGS} PARENT_SCOPE)
