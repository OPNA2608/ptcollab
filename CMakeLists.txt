cmake_minimum_required (VERSION 3.10)

file(STRINGS "version" VERSION)

project (ptcollab
	DESCRIPTION "A collaborative piano-roll music sequencer"
	VERSION ${VERSION}
	LANGUAGES CXX
)

option (INSTALL_FLAT
	"Install everything under CMAKE_INSTALL_PREFIX instead of using Unix-style directory layout (GNUInstallDirs)"
	${WIN32}
)

if (NOT INSTALL_FLAT)
	include (GNUInstallDirs)
	set (PTCOLLAB_DEMODIR "${CMAKE_INSTALL_DATADIR}/${PROJECT_NAME}")
	set (PTCOLLAB_ICONDIR "${CMAKE_INSTALL_DATADIR}/icons/hicolor")
else()
	if (CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT)
		if (WIN32)
			set (PTCOLLAB_DEFAULT_INSTALLDIR "C:/${PROJECT_NAME}")
		else()
			set (PTCOLLAB_DEFAULT_INSTALLDIR "/opt/${PROJECT_NAME}")
		endif()
		set (CMAKE_INSTALL_PREFIX "${PTCOLLAB_DEFAULT_INSTALLDIR}" CACHE PATH "Install base" FORCE)
	endif()

	# Set GNUInstallDirs vars
	set (CMAKE_INSTALL_BINDIR "${CMAKE_INSTALL_PREFIX}")
	set (CMAKE_INSTALL_DATADIR "${CMAKE_INSTALL_PREFIX}")
	set (CMAKE_INSTALL_DOCDIR "${CMAKE_INSTALL_PREFIX}")

	set (PTCOLLAB_DEMODIR "${CMAKE_INSTALL_DATADIR}")
	set (PTCOLLAB_ICONDIR "${CMAKE_INSTALL_DATADIR}/icons")
endif()

# TODO Move this dependency-related code into submodules dir once initialised
set (DEPENDENCIES_INCLUDE_DIRS "")
set (DEPENDENCIES_COMPILE_OPTIONS "")
set (DEPENDENCIES_LIBRARIES "")
set (DEPENDENCIES_LIBRARY_DIRS "")
set (DEPENDENCIES_LINK_OPTIONS "")
set (DEPENDENCIES_LEGACY_LDFLAGS "")
set (DEPENDENCIES_DEFINES "")

include (FindPkgConfig OPTIONAL)

# TODO Offer from-source build
set (SYSTEM_RTMIDI YES)

if (SYSTEM_RTMIDI)
	if (PKG_CONFIG_FOUND)
		pkg_check_modules (RTMIDI rtmidi)
		if (RTMIDI_FOUND)
			list(APPEND DEPENDENCIES_INCLUDE_DIRS ${RTMIDI_INCLUDE_DIRS})
			list(APPEND DEPENDENCIES_COMPILE_OPTIONS ${RTMIDI_CFLAGS_OTHER})
			list(APPEND DEPENDENCIES_LIBRARIES ${RTMIDI_LIBRARIES})
			list(APPEND DEPENDENCIES_LIBRARY_DIRS ${RTMIDI_LIBRARY_DIRS})
			list(APPEND DEPENDENCIES_LINK_OPTIONS ${RTMIDI_LDFLAGS_OTHER})
			list(APPEND DEPENDENCIES_LEGACY_LDFLAGS ${RTMIDI_LDFLAGS})
		endif()
	endif()

	if (NOT RTMIDI_FOUND)
		message (STATUS "Looking for RtMidi library & headers")
		find_library (RTMIDI_MANUAL_LIBRARY rtmidi)
		find_path (RTMIDI_MANUAL_INCLUDE_DIRS NAMES "RtMidi.h" PATH_SUFFIXES "include/rtmidi")

		if (RTMIDI_MANUAL_LIBRARY AND RTMIDI_MANUAL_INCLUDE_DIRS)
			set (RTMIDI_FOUND YES)
			list (APPEND DEPENDENCIES_INCLUDE_DIRS ${RTMIDI_MANUAL_INCLUDE_DIRS})
			set (APPEND DEPENDENCIES_LIBRARIES ${RTMIDI_MANUAL_LIBRARY})
			set (APPEND DEPENDENCIES_LEGACY_LDFLAGS ${RTMIDI_MANUAL_LIBRARY})
		else()
			message (FATAL_ERROR "System-installed RtMidi requested but not found")
		endif()
	endif (NOT RTMIDI_FOUND)

	# TODO from-source build
	# else()
	#		add_subdirectory (RtMidi EXCLUDE_FROM_ALL)
endif (SYSTEM_RTMIDI)

if (RTMIDI_FOUND)
	list (APPEND DEPENDENCIES_DEFINES "RTMIDI_SUPPORTED")
endif()

# TODO Export to global scope when moved to subdir
# set (DEPENDENCIES_INCLUDE_DIRS ${DEPENDENCIES_INCLUDE_DIRS} PARENT_SCOPE)
# set (DEPENDENCIES_DEFINES ${DEPENDENCIES_DEFINES} PARENT_SCOPE)
# set (DEPENDENCIES_COMPILE_OPTIONS ${DEPENDENCIES_COMPILE_OPTIONS} PARENT_SCOPE)
# set (DEPENDENCIES_LIBRARIES ${DEPENDENCIES_LIBRARIES} PARENT_SCOPE)
# set (DEPENDENCIES_LIBRARY_DIRS ${DEPENDENCIES_LIBRARY_DIRS} PARENT_SCOPE)
# set (DEPENDENCIES_LINK_OPTIONS ${DEPENDENCIES_LINK_OPTIONS} PARENT_SCOPE)
# set (DEPENDENCIES_LEGACY_LDFLAGS ${DEPENDENCIES_LEGACY_LDFLAGS} PARENT_SCOPE)

add_subdirectory (res)
add_subdirectory (src)

install (FILES LICENSE DESTINATION "${CMAKE_INSTALL_DOCDIR}")
